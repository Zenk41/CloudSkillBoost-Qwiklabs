Task 1: Create development VPC manually
gcloud compute networks create griffin-dev-vpc --subnet-mode=custom 
gcloud compute networks subnets create griffin-dev-wp  --range=192.168.16.0/20 --network=griffin-dev-vpc --region=us-east1
gcloud compute networks subnets create griffin-dev-mgmt  --range=192.168.32.0/20 --network=griffin-dev-vpc --region=us-east1

Task 2: Create production VPC manually
gcloud compute networks create griffin-prod-vpc --subnet-mode=custom 
gcloud compute networks subnets create griffin-prod-wp  --range=192.168.48.0/20 --network=griffin-prod-vpc --region=us-east1
gcloud compute networks subnets create griffin-prod-mgmt  --range=192.168.64.0/20 --network=griffin-prod-vpc --region=us-east1
OR using md
gsutil cp -r gs://cloud-training/gsp321/dm .
cd dm
sed -i s/SET_REGION/us-east1/g prod-network.yaml
gcloud deployment-manager deployments create prod-network \
 --config=prod-network.yaml
cd ..

Task 3: Create bastion host
gcloud compute instances create bastion --network-interface=network=griffin-dev-vpc,subnet=griffin-dev-mgmt --network-interface=network=griffin-prod-vpc,subnet=griffin-prod-mgmt --tags=ssh --zone=us-east1-b
gcloud compute firewall-rules create fw-ssh-dev --source-ranges=0.0.0.0/0 --target-tags ssh --allow=tcp:22 --network=griffin-dev-vpc
gcloud compute firewall-rules create fw-ssh-prod --source-ranges=0.0.0.0/0 --target-tags ssh --allow=tcp:22 --network=griffin-prod-vpc

Task 4: Create and configure Cloud SQL Instance
gcloud sql instances create griffin-dev-db --root-password password --region=us-east1
gcloud sql connect griffin-dev-db
CREATE DATABASE wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO "wp_user"@"%" IDENTIFIED BY "stormwind_rules";
FLUSH PRIVILEGES;
exit

Task 5: Create Kubernetes cluster
gcloud container clusters create griffin-dev \
--network griffin-dev-vpc \
--subnetwork griffin-dev-wp \
--machine-type n1-standard-4 \
--num-nodes 2 \
--zone us-east1-b 

gcloud container clusters get-credentials griffin-dev --zone us-east1-b

Task 6: Prepare the Kubernetes cluster
gsutil cp -r gs://cloud-training/gsp321/wp-k8s .
cd wp-k8s

nano wp-env.yaml
Add the following secrets and volume to the cluster using wp-env.yaml. Make sure you configure the username to wp_user and password to stormwind_rules before creating the configuration.
kubectl create -f wp-env.yaml

gcloud iam service-accounts keys create key.json \
    --iam-account=cloud-sql-proxy@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com
kubectl create secret generic cloudsql-instance-credentials \
    --from-file key.json

Task 7: Create a WordPress deployment
nano wp-deployment.yaml
replace YOUR_SQL_INSTANCE with griffin-dev-db's Instance connection name. Get the Instance connection name from your Cloud SQL instance.
kubectl create -f wp-deployment.yaml

kubectl create -f wp-service.yaml

Task 8: Enable monitoring 
Navigation Menu > Kubernetes Engine > Services and Ingress > Copy Endpoint's address
Navigation Menu > Monitoring > Uptime Checks > + CREATE UPTIME CHECK
Tittle : Wordpress Uptime
Next > 
Target Hostname : Endpoint's address
Path : / 
Next
Next 
Create

Task 9: Provide access for an additional engineer
Navigation Menu > IAM & Admin > IAM > +ADD  
New Principals : Username 2
Role : Project > Editor
Save